{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"RabbitMQ broker for mcollective",
   "Parameters":{
      "xlcloud:defaultInstanceType":{
         "Description":"Default instance type (flavor) for instances in this stack",
         "Type":"String",
         "Default":"m1.small",
         "AllowedValues":[
            "m1.tiny",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge"
         ],
         "ConstraintDescription":"must be a valid XLcloud instance type."
      },
      "xlcloud:defaultImageId":{
         "Description":"Default image name for instances in this stack",
         "Type":"String",
         "Default":"CentOS-6.5-x86_64-xlcloud",
         "ConstraintDescription":"must be a valid XLcloud image name."
      },
      "xlcloud:defaultSubnetUuid":{
         "Type": "String",
         "Description": "Project's default subnet identifier"
      },
      "RabbitPort": {
         "Type": "String",
         "Default": "63613",
         "Description": "TCP Port used by the RabbitMQ service"
      },
      "RabbitUser": {
         "Description":"RabbitMQ user",
         "Type":"String",
         "Default":"xlcloud"
      },
      "RabbitPassword": {
         "Description":"RabbitMQ password",
         "Type":"String",
         "Default":"xlcloud"
      }
   },
   "Resources":{
      "Handle":{
         "Type": "AWS::CloudFormation::WaitConditionHandle"
      },
      "WaitCondition":{
         "Type": "AWS::CloudFormation::WaitCondition",
         "DependsOn": "RabbitMQServer",
         "Properties":{
           "Handle": {"Ref": "Handle"},
           "Count": "1",
           "Timeout": "1200"
         }
      },
      "IPAddress":{
         "Type":"AWS::EC2::EIP"
      },
      "IPAssoc":{
         "Type":"AWS::EC2::EIPAssociation",
         "Properties":{
            "InstanceId":{
               "Ref":"RabbitMQServer"
            },
            "EIP":{
               "Ref":"IPAddress"
            }
         }
      },
      "RabbitMQSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription": { "Fn::Join": ["",
                ["Enable Stomp protocol via port ", {"Ref": "RabbitPort"},
                 " plus SSH access"]]},
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"icmp",
                  "FromPort":"-1",
                  "ToPort":"-1",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":{"Ref": "RabbitPort"},
                  "ToPort":{"Ref": "RabbitPort"},
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
      "RabbitMQServer":{
         "Type":"AWS::EC2::Instance",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "/etc/chef/runlist-setup.json":{
                        "content":{
                           "run_list":[
                              "role[rabbitmq-for-mcollective]"
                           ]
                        }
                     },
                     "/var/chef/chef-repo/roles/rabbitmq-for-mcollective.json":{
                        "content":{
                           "name":"rabbitmq-for-mcollective",
                           "default_attributes":{
                              "rabbitmq":{
                                 "policies": [],
                                 "port":{"Ref": "RabbitPort"},
                                 "virtualhosts":[
                                    "/"
                                 ],
                                 "enabled_plugins":[
                                    "amqp_client",
                                    "rabbitmq_stomp",
                                    "rabbitmq_management"
                                 ],
                                 "enabled_users":[
                                    {
                                       "name":{"Ref":"RabbitUser"},
                                       "password":{"Ref":"RabbitPassword"},
                                       "tag": "administrator",
                                       "rights":[
                                          {
                                             "vhost":"/",
                                             "conf":".*",
                                             "write":".*",
                                             "read":".*"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           },
                           "override_attributes":{

                           },
                           "json_class":"Chef::Role",
                           "description":"Role for configuring rabbitmq as a broker for mcollective.",
                           "chef_type":"role",
                           "run_list":[
                              "recipe[rabbitmq]",
                              "recipe[rabbitmq::plugin_management]",
                              "recipe[rabbitmq::policy_management]",
                              "recipe[rabbitmq::user_management]",
                              "recipe[rabbitmq::virtualhost_management]"
                           ]
                        }
                     },
                     "/var/chef/chef-repo/Cheffile":{
                        "content":{
                           "Fn::Join":[
                              "\n",
                              [
                                 "#!/usr/bin/env ruby",
                                 "#^syntax detection",
                                 "site 'http://community.opscode.com/api/v1'",
                                 "cookbook 'rabbitmq',",
                                 "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                 "    :path => 'rabbitmq'"
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Properties":{
            "ImageId":{
               "Ref":"xlcloud:defaultImageId"
            },
            "InstanceType":{
               "Ref":"xlcloud:defaultInstanceType"
            },
            "SubnetId":{
               "Ref":"xlcloud:defaultSubnetUuid"
            },
            "SecurityGroups":[
            {
                  "Ref":"RabbitMQSecurityGroup"
            }
            ],
            "Tags":[
            {
                "Key" : "StackId",
                "Value" : { "Ref": "AWS::StackId" }
            }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "export HOME=/root\n",
                        "source /etc/profile.d/proxy.sh\n",
                        "function catch_error() {\n",
                        "  local line_no=$1\n",
                        "  local exit_code=$2\n",
                        "  cfn-signal -e ${exit_code} -r Error_at_line_${line_no} '", {"Ref": "Handle"}, "'\n",
                        "  exit ${exit_code}\n",
                        "}\n",
                        "function install_heatcfntools() { pip install --upgrade heat-cfntools; }\n",
                        "# install heat-cfntools with retries\n",
                        "install_heatcfntools || install_heatcfntools || install_heatcfntools\n",
                        "trap 'catch_error ${LINENO} ${?}' ERR\n",
                        "cfn-init\n",
                        "cd /var/chef/chef-repo\n",
                        "/usr/local/bin/librarian-chef install --clean --verbose\n",
                        "/bin/chef-solo -c /etc/chef/solo.rb -j /etc/chef/runlist-setup.json -L /var/log/chef-solo.log\n",
                        "sleep 10\n",
                        "curl -s http://127.0.0.1:15672/cli/rabbitmqadmin > /usr/local/bin/rabbitmqadmin\n",
                        "chmod 0755 /usr/local/bin/rabbitmqadmin\n",
                        "/usr/local/bin/rabbitmqadmin -u ", {"Ref":"RabbitUser"}, " -p ", {"Ref":"RabbitPassword"}, " declare exchange  name=mcollective_broadcast type=topic\n",
                        "/usr/local/bin/rabbitmqadmin -u ", {"Ref":"RabbitUser"}, " -p ", {"Ref":"RabbitPassword"}, " declare exchange  name=mcollective_directed type=direct\n",
                        "cfn-signal -e 0 '", {"Ref": "Handle"}, "'"
                     ]
                  ]
               }
            }
         }
      }
   },
   "Outputs":{
      "Private IP":{
         "Description":"Private IP of the RabbitMQ broker",
         "Value":{
            "Fn::Join":[
               "",
               [
                  {
                     "Fn::GetAtt":[
                        "RabbitMQServer",
                        "PublicIp"
                     ]
                  }
               ]
            ]
         }
      },
      "Public IP":{
         "Description":"Public IP of the RabbitMQ broker",
         "Value":{
            "Ref":"IPAddress"
         }
      }
   }
}
