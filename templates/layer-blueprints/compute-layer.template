{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy a cluster with N (default=2) compute nodes + 1 front-end node.",
    "Outputs": {
        "FrontAddress": {
            "Description": "IP address of the cluster's front node",
            "Value": {
                "Ref": "FrontIp"
            }
        },
        "NodesAddresses": {
            "Description": "IP addresses of the cluster's compute nodes",
            "Value": {
                "Fn::GetAtt": [
                    "Computes",
                    "InstanceList"
                ]
            }
        }
    },
    "Parameters": {
        "monitorAddress": {
            "Description": "IP address of the Ganglia Metadata server (gmond)",
            "Type": "String"
        },
        "nfsAddress": {
            "Description": "IP address of the NFS server",
            "Type": "String"
        },
        "xlcloud:Computes:size": {
            "Default": "2",
            "Description": "Number of compute nodes to launch",
            "Type": "String"
        },
        "xlcloud:brokerAddress": {
            "Description": "RabbitMQ broker address",
            "Type": "String"
        },
        "xlcloud:brokerPassword": {
            "Description": "RabbitMQ broker password",
            "Type": "String"
        },
        "xlcloud:brokerPort": {
            "Description": "RabbitMQ broker port",
            "Type": "String"
        },
        "xlcloud:brokerUsername": {
            "Description": "RabbitMQ broker username",
            "Type": "String"
        },
        "xlcloud:defaultImageId": {
            "ConstraintDescription": "must be a valid XLcloud image name.",
            "Description": "Cloud image Id for instances in this stack",
            "Type": "String"
        },
        "xlcloud:defaultInstanceType": {
            "AllowedValues": [
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge"
            ],
            "Default": "m1.medium",
            "Type": "String"
        },
        "xlcloud:defaultKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String"
        },
        "xlcloud:layerSubnetUuid": {
            "Description": "The subnet identifier this layer is connected to",
            "Type": "String"
        },
        "xlcloud:monitoringCluster": {
            "Description": "Name of the cluster in the monitoring system",
            "Type": "String"
        },
        "xlcloud:stackId": {
            "Description": "The identifier of the parent stack",
            "Type": "String"
        },
        "xlcloud:stackSecret": {
            "Description": "Secret for service authentication",
            "NoEcho": "TRUE",
            "Type": "String"
        },
        "xlcloud:xmsAddress": {
            "Description": "Address of XLCloud Management System",
            "Type": "String"
        }
    },
    "Resources": {
        "ClusterMetaData": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/chef/configure-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/deploy-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/resume-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/setup-runlist.json": {
                                "content": {
                                    "ganglia": {
                                        "central_monit": "false",
                                        "cluster": {
                                            "collector_host": {
                                                "Ref": "monitorAddress"
                                            },
                                            "name": {
                                                "Ref": "xlcloud:monitoringCluster"
                                            }
                                        }
                                    },
                                    "mcollective": {
                                        "connector": "rabbitmq",
                                        "factsource": "ohai",
                                        "psk": "supersecret",
                                        "stomp": {
                                            "hostname": {
                                                "Ref": "xlcloud:brokerAddress"
                                            },
                                            "password": {
                                                "Ref": "xlcloud:brokerPassword"
                                            },
                                            "port": {
                                                "Ref": "xlcloud:brokerPort"
                                            },
                                            "username": {
                                                "Ref": "xlcloud:brokerUsername"
                                            }
                                        }
                                    },
                                    "nfs-client": {
                                        "server": {
                                            "Ref": "nfsAddress"
                                        }
                                    },
                                    "run_list": [
                                        "recipe[ohai]",
                                        "recipe[mcollective::server]",
                                        "recipe[xlc-mco-agent]",
                                        "recipe[ganglia]",
                                        "recipe[ganglia::stack]",
                                        "recipe[nfs-client::setup]"
                                    ]
                                }
                            },
                            "/etc/chef/shutdown-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/suspend-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/undeploy-runlist.json": {
                                "content": {}
                            },
                            "/var/chef/chef-repo/Cheffile": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/usr/bin/env ruby",
                                            "site 'http://community.opscode.com/api/v1'",
                                            "cookbook 'ohai'",
                                            "cookbook 'mcollective',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'mcollective'",
                                            "cookbook 'xlc-common',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'xlc-common'",
                                            "cookbook 'xlc-mco-agent',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'xlc-mco-agent'",
                                            "cookbook 'ganglia',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'ganglia'",
                                            "cookbook 'nfs-client',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'nfs-client'"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00400",
                                "owner": "root"
                            }
                        }
                    }
                },
                "IpAddresses": {
                    "Fn::GetAtt": [
                        "Computes",
                        "InstanceList"
                    ]
                },
                "Size": {
                    "Ref": "xlcloud:Computes:size"
                }
            },
            "Properties": {
                "ImageId": "foobar",
                "InstanceType": "foobar"
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ComputeConfiguration": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/chef/configure-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/deploy-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/resume-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/setup-runlist.json": {
                                "content": {
                                    "ganglia": {
                                        "central_monit": "false",
                                        "cluster": {
                                            "collector_host": {
                                                "Ref": "monitorAddress"
                                            },
                                            "name": {
                                                "Ref": "xlcloud:monitoringCluster"
                                            }
                                        }
                                    },
                                    "mcollective": {
                                        "connector": "rabbitmq",
                                        "factsource": "ohai",
                                        "psk": "supersecret",
                                        "stomp": {
                                            "hostname": {
                                                "Ref": "xlcloud:brokerAddress"
                                            },
                                            "password": {
                                                "Ref": "xlcloud:brokerPassword"
                                            },
                                            "port": {
                                                "Ref": "xlcloud:brokerPort"
                                            },
                                            "username": {
                                                "Ref": "xlcloud:brokerUsername"
                                            }
                                        }
                                    },
                                    "nfs-client": {
                                        "server": {
                                            "Ref": "nfsAddress"
                                        }
                                    },
                                    "run_list": [
                                        "recipe[ohai]",
                                        "recipe[mcollective::server]",
                                        "recipe[xlc-mco-agent]",
                                        "recipe[ganglia]",
                                        "recipe[ganglia::stack]",
                                        "recipe[nfs-client::setup]"
                                    ]
                                }
                            },
                            "/etc/chef/shutdown-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/suspend-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/undeploy-runlist.json": {
                                "content": {}
                            },
                            "/etc/xlcloud-facts.json": {
                                "content": {
                                    "layer_id": {
                                        "Ref": "AWS::StackId"
                                    },
                                    "logical_resource_id": "Computes",
                                    "stack_id": {
                                        "Ref": "xlcloud:stackId"
                                    }
                                }
                            },
                            "/var/chef/chef-repo/Cheffile": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/usr/bin/env ruby",
                                            "site 'http://community.opscode.com/api/v1'",
                                            "cookbook 'ohai'",
                                            "cookbook 'mcollective',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'mcollective'",
                                            "cookbook 'xlc-common',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'xlc-common'",
                                            "cookbook 'xlc-mco-agent',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'xlc-mco-agent'",
                                            "cookbook 'ganglia',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'ganglia'",
                                            "cookbook 'nfs-client',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'nfs-client'"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00400",
                                "owner": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "xlcloud:defaultImageId"
                },
                "InstanceType": {
                    "Ref": "xlcloud:defaultInstanceType"
                },
                "KeyName": {
                    "Ref": "xlcloud:defaultKeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "PublicLayerSecurityGroup"
                    },
                    {
                        "Ref": "PrivateLayerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ve\n",
                                "#HOME is required by librarian\n",
                                "export HOME=/root\n",
                                "source /etc/profile.d/proxy.sh\n",
                                "echo `curl -s http://169.254.169.254/latest/meta-data/instance-id` > /etc/hostname\n",
                                "hostname `cat /etc/hostname`\n",
                                "pip install --upgrade heat-cfntools\n",
                                "cfn-init\n",
                                "cd /var/chef/chef-repo\n",
                                "/usr/local/bin/librarian-chef install --clean --verbose\n",
                                "/bin/chef-solo -c /etc/chef/solo.rb -j /etc/chef/setup-runlist.json -L /var/log/chef-solo.log\n",
                                "cfn-signal -e 0 -i $(hostname) '",
                                {
                                    "Ref": "ComputeHandle"
                                },
                                "'"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ComputeHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "ComputeReady": {
            "DependsOn": "Computes",
            "Properties": {
                "Count": {
                    "Ref": "xlcloud:Computes:size"
                },
                "Handle": {
                    "Ref": "ComputeHandle"
                },
                "Timeout": "2400"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "Computes": {
            "DependsOn": "FrontReady",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": {
                    "Ref": "ComputeConfiguration"
                },
                "MaxSize": {
                    "Ref": "xlcloud:Computes:size"
                },
                "MinSize": {
                    "Ref": "xlcloud:Computes:size"
                },
                "Tags": [
                    {
                        "Key": "metering.StackId",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "xlcloud:layerSubnetUuid"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "Front": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/chef/configure-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/deploy-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/resume-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/setup-runlist.json": {
                                "content": {
                                    "ganglia": {
                                        "central_monit": "false",
                                        "cluster": {
                                            "collector_host": {
                                                "Ref": "monitorAddress"
                                            },
                                            "name": {
                                                "Ref": "xlcloud:monitoringCluster"
                                            }
                                        }
                                    },
                                    "mcollective": {
                                        "connector": "rabbitmq",
                                        "factsource": "ohai",
                                        "psk": "supersecret",
                                        "stomp": {
                                            "hostname": {
                                                "Ref": "xlcloud:brokerAddress"
                                            },
                                            "password": {
                                                "Ref": "xlcloud:brokerPassword"
                                            },
                                            "port": {
                                                "Ref": "xlcloud:brokerPort"
                                            },
                                            "username": {
                                                "Ref": "xlcloud:brokerUsername"
                                            }
                                        }
                                    },
                                    "nfs-client": {
                                        "server": {
                                            "Ref": "nfsAddress"
                                        }
                                    },
                                    "run_list": [
                                        "recipe[ohai]",
                                        "recipe[mcollective::server]",
                                        "recipe[xlc-mco-agent]",
                                        "recipe[ganglia]",
                                        "recipe[ganglia::stack]",
                                        "recipe[nfs-client::setup]"
                                    ]
                                }
                            },
                            "/etc/chef/shutdown-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/suspend-runlist.json": {
                                "content": {}
                            },
                            "/etc/chef/undeploy-runlist.json": {
                                "content": {}
                            },
                            "/etc/xlcloud-facts.json": {
                                "content": {
                                    "layer_id": {
                                        "Ref": "AWS::StackId"
                                    },
                                    "logical_resource_id": "Front",
                                    "stack_id": {
                                        "Ref": "xlcloud:stackId"
                                    }
                                }
                            },
                            "/var/chef/chef-repo/Cheffile": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/usr/bin/env ruby",
                                            "site 'http://community.opscode.com/api/v1'",
                                            "cookbook 'ohai'",
                                            "cookbook 'mcollective',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'mcollective'",
                                            "cookbook 'xlc-common',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'xlc-common'",
                                            "cookbook 'xlc-mco-agent',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'xlc-mco-agent'",
                                            "cookbook 'ganglia',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'ganglia'",
                                            "cookbook 'nfs-client',",
                                            "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',",
                                            "    :path => 'nfs-client'"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00400",
                                "owner": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "xlcloud:defaultImageId"
                },
                "InstanceType": {
                    "Ref": "xlcloud:defaultInstanceType"
                },
                "KeyName": {
                    "Ref": "xlcloud:defaultKeyName"
                },
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "FrontNetworkInterface"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "metering.StackId",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ve\n",
                                "# HOME is required by librarian\n",
                                "export HOME=/root\n",
                                "source /etc/profile.d/proxy.sh\n",
                                "echo `curl -s http://169.254.169.254/latest/meta-data/instance-id` > /etc/hostname\n",
                                "hostname `cat /etc/hostname`\n",
                                "pip install --upgrade heat-cfntools\n",
                                "cfn-init\n",
                                "cd /var/chef/chef-repo\n",
                                "/usr/local/bin/librarian-chef install --clean --verbose\n",
                                "/bin/chef-solo -c /etc/chef/solo.rb -j /etc/chef/setup-runlist.json -L /var/log/chef-solo.log\n",
                                "cfn-signal -e 0 '",
                                {
                                    "Ref": "FrontHandle"
                                },
                                "'"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "FrontHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "FrontIp": {
            "Type": "AWS::EC2::EIP"
        },
        "FrontIpAssoc": {
            "Properties": {
                "EIP": {
                    "Ref": "FrontIp"
                },
                "InstanceId": {
                    "Ref": "Front"
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "FrontNetworkInterface": {
            "Properties": {
                "GroupSet": [
                    {
                        "Ref": "FrontNodeSecurityGroup"
                    },
                    {
                        "Ref": "PublicLayerSecurityGroup"
                    },
                    {
                        "Ref": "PrivateLayerSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "xlcloud:layerSubnetUuid"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "FrontNodeSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow access to HTTP/HTTPS services from anywhere",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "VpcId": "neutron"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "FrontReady": {
            "DependsOn": "Front",
            "Properties": {
                "Count": "1",
                "Handle": {
                    "Ref": "FrontHandle"
                },
                "Timeout": "2400"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "PrivateLayerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow any traffic from all instances of the layer",
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "PublicLayerSecurityGroup"
                        }
                    }
                ],
                "VpcId": "neutron"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "PublicLayerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow SSH access + ICMP from anywhere",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "-1",
                        "IpProtocol": "icmp",
                        "ToPort": "-1"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": "neutron"
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}
