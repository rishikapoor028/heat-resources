HeatTemplateFormatVersion: '2012-12-12'
Description: Layer1 AutoScalingGroup with Ganglia 
Outputs:
  NodeIP:
    Description: Ganglia deployment
    Value:
      Fn::GetAtt: ['Layer1', 'InstanceList'] 
Parameters:
  MonitorPort: {Default: '8649', Type: String, Description: TCP port of monitoring traffic data}
  MonitorIP: 
       Type: String
       Description: IP of the Gmetad server
       MinLength: '1'
       MaxLength: '64'
  NodeCountMinimum:
    Description: Minimum numb
    Type: String
    Default: '1'
    AllowedPattern: '[0-9]*'
  NodeCountMaximum:
    Description: Maximum number of nodes to scale up to
    Type: String
    Default: '4'
    AllowedPattern: '[0-9]*'
  #RunList: {Default: ganglia, Type: String,
  #  Description: Collection of recipes to execute}
  CookbooksUrl: 
          Type: String 
          Description: Url of the application cookbooks archive
          Default: http://10.197.217.62/downloads/cookbooks/ganglia.tgz
  xlcloud:defaultImageId: 
    Type: String
    ConstraintDescription: must be a valid XLcloud image name.
    AllowedValues: 
    - F17-x86_64
    - F18-x86_64
    - F19-x86_64-chef-solo
    - quantal-server-cloudimg-amd64
    Description: Default image name for instances in this stack
    Default: quantal-server-cloudimg-amd64
  xlcloud:defaultInstanceType: 
    Type: String
    ConstraintDescription: must be a valid XLcloud instance type.
    AllowedValues: 
    - m1.tiny
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    Description: Default instance type (flavor) for instances in this stack
    Default: m1.tiny
  xlcloud:defaultKeyName: 
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access
Resources:
  Layer1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 
          Ref: NodeCountMinimum 
      MaxSize:
          Ref: NodeCountMaximum
      AvailabilityZones: {'Fn::GetAZs': ''}
      LaunchConfigurationName: {Ref: Layer1Config}
#      LoadBalancerNames: [ElasticLoadBalancer]
  CfnUser: {Type: 'AWS::IAM::User'}
  CPUAlarmHigh:
    Type: OS::Metering::Alarm
    Properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      counter_name: cpu_util
      statistic: avg
      period: '63'
      evaluation_periods: '1'
      threshold: '50'
      alarm_actions:
      - {"Fn::GetAtt": [L1ScaleUpPolicy, AlarmUrl]}
      matching_metadata: {'metadata.user_metadata.groupname': {Ref: Layer1}}
      comparison_operator: gt
  CPUAlarmLow:
    Type: OS::Metering::Alarm
    Properties:
      description: Scale-down if the average CPU < 15% for 1 minute
      counter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '15'
      alarm_actions:
      - {"Fn::GetAtt": [L1ScaleDownPolicy, AlarmUrl]}
      matching_metadata: {'metadata.user_metadata.groupname': {Ref: Layer1}}
      comparison_operator: lt
  Layer1Keys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: {Ref: CfnUser}
  LayerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - {ToPort: {Ref: MonitorPort}, IpProtocol: tcp, FromPort: {Ref: MonitorPort}, CidrIp: 0.0.0.0/0}
      - {ToPort: '22', IpProtocol: tcp, FromPort: '22', CidrIp: 0.0.0.0/0}
      GroupDescription: Enable SSh and Ganglia traffic
  Layer1Config:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |-
                #!/bin/bash -v
                exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                /sbin/iptables -F
                /sbin/iptables -X
                export MY_HTTP_PROXY=http://10.197.217.62:3128
                export MY_IPV4=$(http_proxy= curl -s http://169.254.169.254/latest/meta-data/local-ipv4/)
                export MY_PUB_IPV4=$(http_proxy= curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
                export MY_HOSTNAME=$(http_proxy= curl -s http://169.254.169.254/latest/meta-data/hostname)
                cat /etc/hosts && echo $MY_IPV4 $MY_HOSTNAME >> /etc/hosts && cat etc/hosts
                cat << EOF >> /etc/profile.d/http_proxy.sh
                export http_proxy=$MY_HTTP_PROXY
                export https_proxy=$MY_HTTP_PROXY
                export no_proxy=127.0.0.1,localhost,169.254.169.254,$MY_IPV4
                EOF
                # env
                source /etc/profile.d/http_proxy.sh
                echo 'Acquire::http::Proxy "http://10.197.217.62:3128";' >> /etc/apt/apt.conf
                locale-gen fr_FR.UTF-8
                apt-get update
                #### apt-get -y install git
                apt-get -y remove python-boto
                apt-get -y install python-psutil python-pip cloud-init
                pip install 'boto==2.5.2' heat-cfntools
                cfn-create-aws-symlinks -s /usr/local/bin/
                # CFN
                /opt/aws/bin/cfn-init -s
            - {Ref: 'AWS::StackName'}
            - ' -r Layer1Config --region '
            - {Ref: 'AWS::Region'}
            - |-

                ## Chef
                export CHEF_DIR=/etc/chef && mkdir -p $CHEF_DIR/cookbooks
                apt-get -y install ruby ruby1.8-dev build-essential libruby1.8 rubygems
                gem update --no-rdoc --no-ri
                DEBIAN_FRONTEND='noninteractive' apt-get -y install chef
                #gem install ohai chef --no-rdoc --no-ri
                cd $CHEF_DIR/cookbooks
                http_proxy= wget http://10.197.217.62/downloads/tpl/ganglia.tgz && tar xzvf ganglia.tgz && rm ganglia.tgz
                ## XXX need to wait 
                sleep 30
                chef-solo -l debug -j /etc/chef/node.json -c /etc/chef/solo.rb
                ## XXX need restart ... to have numuber of cpu in MonitorNode
                service ganglia-monitor restart
            
      KeyName: 
          Ref: 'xlcloud:defaultKeyName'
      InstanceType: 
          Ref: 'xlcloud:defaultInstanceType'
      ImageId: 
          Ref: 'xlcloud:defaultImageId'
      SecurityGroups:
      - {Ref: LayerSecurityGroup}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
           # /etc/cfn/cfn-credentials: 
           #   content:
           #     Fn::Join:
           #     - ''
           #     - - AWSAccessKeyId=
           #       - {Ref: MyKeyIam}
           #       - '

           #         '
           #       - AWSSecretKey=
           #       - {Ref: MyKeySecretAccessKey}
           #       - '

           #         '
           #   owner: root
           #   group: root
           #   mode: '000400'
            /root/.chef/knife.rb:
              content:
                Fn::Join:
                - '

                  '
                - ['cookbook_path [ ''/etc/chef/cookbooks'' ]', 'ssl_verify_mode  :verify_none',
                  'http_proxy ''http://10.197.217.62:3128''', 'https_proxy ''http://10.197.217.62:3128''']
              owner: root
              group: root
              mode: '000644'
            /etc/chef/solo.rb:
              content:
                Fn::Join:
                - '

                  '
                - [file_cache_path  '/etc/chef', cookbook_path    '/etc/chef/cookbooks',
                  json_attribs '/etc/chef/node.json', 'log_level        :info', log_location     STDOUT,
                  'ssl_verify_mode  :verify_none', 'http_proxy ''http://10.197.217.62:3128''',
                  'https_proxy ''http://10.197.217.62:3128''', 'no_proxy ''127.0.0.1,localhost''']
              owner: root
              group: root
              mode: '000644'
            /etc/chef/node.json:
              content:
                Fn::Join:
                - ''
                - - |-
                      {
                       "ganglia" : { "central_monit" : false,
                                     "cluster" : {
                                        "name" : "Layer1",
                                        "collector_host" : "
                  - {Ref : MonitorIP}
                  - |- 
                      "}
                       },
                       "run_list" : [ "recipe[ganglia]", "recipe[ganglia::python_rr]" ]
                       }
  L1ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      ScalingAdjustment: '1'
      AutoScalingGroupName: {Ref: Layer1}
      Cooldown: '60'
      AdjustmentType: ChangeInCapacity
  L1ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      ScalingAdjustment: '-1'
      AutoScalingGroupName: {Ref: Layer1}
      Cooldown: '62'
      AdjustmentType: ChangeInCapacity

