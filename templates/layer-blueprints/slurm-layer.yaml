# TODO(pasquier-s):
# - use Cinder volume instead of ephemeral storage
AWSTemplateFormatVersion: "2010-09-09"
Description: &template_description
  "Deploy SLURM cluster with N (default=2) compute nodes + 1 login node to run micro benchmarks of MPI.

On each node, run chef-solo:

    $ sudo chef-solo -j /etc/chef/configure-runlist.json

Once the cluster is up, login to the login node and run:

    $ salloc -N2 -c<CPUs> mpirun /usr/local/libexec/osu-micro-benchmarks/mpi/pt2pt/osu_latency\n"

Parameters:
  "xlcloud:monitorIP":
    Description: "IP of the Ganglia Metadata server (gmond)"
    Type: String
  "xlcloud:defaultKeyName":
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instances"
    Type: String
  "xlcloud:defaultImageId":
    Type: String
    ConstraintDescription: must be a valid XLcloud image name.
    AllowedValues:
    - F19-x86_64-xlcloud
    Description: Cloud image Id for instances in this stack
  "xlcloud:stackId":
     Description: "The identifier of the parent stack"
     Type: String
  "xlcloud:defaultSubnetUuid":
     Description: "The subnet identifier this layer is connected to"
     Type: String
  "xlcloud:defaultInstanceType":
    # Note: when updating this list, update SlurmParameters mapping too
    AllowedValues: ["m1.small", "m1.medium", "m1.large", "m1.xlarge"]
    Type: String
    Default: "m1.medium"
  "xlcloud:Computes:size":
    Description: "Number of compute nodes to launch"
    Type: String
    Default: '2'
  "xlcloud:brokerAddress":
      Type: "String"
      Description: "RabbitMQ broker address"
  "xlcloud:brokerPort":
      Type: "String"
      Description: "RabbitMQ broker port"
  "xlcloud:brokerUsername":
      Type: "String"
      Description: "RabbitMQ broker username"
  "xlcloud:brokerPassword":
      Type: "String"
      Description: "RabbitMQ broker password"
  "xlcloud:monitoringCluster":
      Type: "String"
      Description: "Name of the cluster in the monitoring system"

Mappings:
  SlurmParameters:
    "m1.small": { "cpus": "1"}
    "m1.medium": {"cpus": "2"}
    "m1.large": {"cpus": "4"}
    "m1.xlarge": {"cpus": "8"}

Resources:
  LoginIp: { Type: 'AWS::EC2::EIP' }

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: {Ref: Login}
      EIP: {Ref: LoginIp}

  CfnUser:
    Type: AWS::IAM::User
  CfnUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: {Ref: CfnUser}

  LayerSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Enable Stomp protocol + SSH access + ICMP"
        VpcId: neutron
        SecurityGroupIngress:
          -
            IpProtocol: "icmp"
            FromPort: "-1"
            ToPort: "-1"
            CidrIp: "0.0.0.0/0"
          -
            IpProtocol: "tcp"
            FromPort: {Ref: "xlcloud:brokerPort"}
            ToPort: {Ref: "xlcloud:brokerPort"}
            CidrIp: "0.0.0.0/0"
          -
            IpProtocol: "tcp"
            FromPort: "22"
            ToPort: "22"
            CidrIp: "0.0.0.0/0"

  Computes:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LoginReady
    Properties:
      LaunchConfigurationName: {Ref: ComputeConfiguration}
      MinSize: {Ref: "xlcloud:Computes:size"}
      MaxSize: {Ref: "xlcloud:Computes:size"}
      AvailabilityZones: {'Fn::GetAZs': ''}
      VPCZoneIdentifier: [ {Ref: 'xlcloud:defaultSubnetUuid'} ]
      Tags:
      - { Key: metering.StackId, Value: {Ref: 'AWS::StackId'}}

  ClusterMetaData:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      IpAddresses: {'Fn::GetAtt': [Computes, InstanceList]}
      Size: {Ref: "xlcloud:Computes:size"}
    Properties:
      ImageId: foobar
      InstanceType: foobar

  LoginHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LoginReady:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Login
    Properties:
      Handle: {Ref: LoginHandle}
      Count: '1'
      Timeout: '2400'

  ComputeHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  ComputeReady:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Computes
    Properties:
      Handle: {Ref: ComputeHandle}
      Count: {Ref: "xlcloud:Computes:size"}
      Timeout: '2400'

  Login:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/motd:
              content: *template_description

            /etc/chef/setup-runlist.json:
              content:
                slurm:
                    master: "true"
                run_list:
                    - "role[xlc-mco-agent]"
                    - "recipe[slurm::setup]"
                    - "role[ganglia-agent]"

            /etc/chef/configure-runlist.json:
              content:
                Fn::Join:
                  - ''
                  - - '{"slurm": {"master": "true","stack":"'
                    - {Ref: "AWS::StackId"}
                    - '","cpus":'
                    - {'Fn::FindInMap': ["SlurmParameters", {Ref: "xlcloud:defaultInstanceType"}, "cpus"]}
                    - '}, "run_list": [ "recipe[slurm::configure]" ]}'

            /etc/chef/deploy-runlist.json:
              content: '{"slurm": {"master": "true"}, "run_list": [ "recipe[slurm::deploy]" ]}'

            /etc/xlcloud-facts.json:
                content:
                    layer_id: {Ref: 'AWS::StackId'}
                    stack_id: {Ref: 'xlcloud:stackId'}
                    logical_resource_id: "Login"

            /etc/cfn/cfn-credentials: &cfn-credentials
              content:
                Fn::Join:
                  - ''
                  - - AWSAccessKeyId=
                    - {Ref : CfnUserKey}
                    - '

                      '
                    - AWSSecretKey=
                    - 'Fn::GetAtt': [CfnUserKey, SecretAccessKey]
                    - '

                      '
              mode: "00400"
              owner: root
              group: root

            /var/chef/chef-repo/roles/ganglia-agent.json: &ganglia-agent
              content:
                  chef_type: "role"
                  default_attributes: {}
                  override_attributes:
                    ganglia:
                        central_monit: false
                        cluster:
                            collector_host: {Ref: "xlcloud:monitorIP"}
                            name: {Ref: "xlcloud:monitoringCluster"}
                  description: "This is a role to install the monitoring agent."
                  run_list:
                    - "recipe[ganglia]"
                    - "recipe[ganglia::xlcloud_facts]"
                  json_class: "Chef::Role"
                  name: "ganglia-agent"
              mode: "00400"
              owner: root
              group: root

            /var/chef/chef-repo/roles/xsa-agent.json:
              content:
                  chef_type: "role"
                  default_attributes: {}
                  override_attributes:
                    xsa:
                        application_war_url: "http://toolcloud.ecfrec.xlcloud.org/integ/xlcloud-xsa.war"
                  description: "This is a role to install the XSA agent."
                  run_list:
                    - "recipe[glassfish_ark]"
                    - "recipe[xsa]"
                  json_class: "Chef::Role"
                  name: "xsa-agent"
              mode: "00400"
              owner: root
              group: root

            /var/chef/chef-repo/roles/xlc-mco-agent.json: &xlc-mco-agent
              content:
                  chef_type: "role"
                  default_attributes: {}
                  override_attributes:
                    mcollective:
                      enable_puppetlabs_repo: false
                      connector: "rabbitmq"
                      factsource: "ohai"
                      psk: "supersecret"
                      stomp:
                        hostname: {Ref: "xlcloud:brokerAddress"}
                        port: {Ref: "xlcloud:brokerPort"}
                        username: {Ref: "xlcloud:brokerUsername"}
                        password: {Ref: "xlcloud:brokerPassword"}
                  description: "This is a role to install ohai + mcollective server + xlcloud agent."
                  run_list:
                    - "recipe[ohai]"
                    - "recipe[mcollective::server]"
                    - "recipe[xlc-mco-agent]"
                  json_class: "Chef::Role"
                  name: "xlc-mco-agent"
              mode: "00400"
              owner: root
              group: root

            /var/chef/chef-repo/Cheffile: &Cheffile
              content:
                Fn::Join:
                  - "\n"
                  -
                    - "#!/usr/bin/env ruby"
                    - "site 'http://community.opscode.com/api/v1'"
                    - "cookbook 'ohai'"
                    - "cookbook 'mcollective',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'mcollective'"
                    - "cookbook 'xlc-mco-agent',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'xlc-mco-agent'"
                    - "cookbook 'slurm',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'slurm'"
                    - "cookbook 'hostsfile',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'hostsfile'"
                    - "cookbook 'line',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'line'"
                    - "cookbook 'nfs',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'nfs'"
                    - "cookbook 'nfs_export',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'nfs_export'"
                    - "cookbook 'ganglia',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'ganglia'"
                    - "cookbook 'jdk_ark',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'jdk_ark'"
                    - "cookbook 'glassfish_ark',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'glassfish_ark'"
                    - "cookbook 'xsa',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'xsa'"
              mode: "00400"
              owner: root
              group: root


    Properties:
      ImageId: {Ref: 'xlcloud:defaultImageId'}
      InstanceType: {Ref: 'xlcloud:defaultInstanceType'}
      KeyName: {Ref: 'xlcloud:defaultKeyName'}
      Tags:
      - { Key: metering.StackId, Value: {Ref: 'AWS::StackId'}}
      SecurityGroups: [default,  {"Ref" : "LayerSecurityGroup"}]
      SubnetId: {Ref: 'xlcloud:defaultSubnetUuid'}
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -ve

            '
            - '# HOME is required by librarian

            '
            - 'export HOME=/root

            '
            - 'source /etc/profile.d/proxy.sh

            '
            - 'echo `curl -s http://169.254.169.254/latest/meta-data/instance-id` > /etc/hostname

            '
            - 'hostname `cat /etc/hostname`

            '
            - 'pip install --upgrade heat-cfntools

            '
            - 'cfn-init

            '
            - 'cd /var/chef/chef-repo

            '
            - '/usr/local/bin/librarian-chef install --clean --verbose

            '
            - '/bin/chef-solo -c /etc/chef/solo.rb -j /etc/chef/setup-runlist.json -L /var/log/chef-solo.log

              '
            - "cfn-signal -e 0 '"
            - {Ref: LoginHandle}
            - "'"


  ComputeConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials: *cfn-credentials
            /var/chef/chef-repo/roles/xlc-mco-agent.json: *xlc-mco-agent
            /var/chef/chef-repo/Cheffile: *Cheffile

            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - 'stack='
                  - {Ref: 'AWS::StackId'}
                  - '

                    '
                  - 'credential-file=/etc/cfn/cfn-credentials

                    '
              mode: "000400"
              owner: "root"
              group: "root"

            /etc/cfn/waitcondition-signal:
              content:
                Fn::Join:
                - ''
                - - '#!/bin/bash -ve

                    '
                  - "/usr/bin/cfn-signal -e 0 -i $(hostname) '"
                  - {Ref: ComputeHandle}
                  - "'

                    "
                  - 'echo "cfn-signal executed"

                    ' 
              mode: "000750"
              owner: "root"
              group: "root"

            /etc/cfn/hooks.conf:
              content:
                Fn::Join:
                - ''
                - - '[waitcondition-wakeup]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.ClusterMetaData

                    '
                  - 'action=/etc/cfn/waitcondition-signal

                    '
                  - 'runas=root

                    '

            /tmp/cfn-hup-crontab.txt:
              content:
                Fn::Join:
                - ''
                - - 'MAIL=""

                    '
                  - '* * * * * /usr/bin/cfn-hup -f

                    '

            /etc/chef/setup-runlist.json:
              content:
                slurm:
                  nfs_server: {"Fn::GetAtt": [Login, PrivateIp]}
                run_list:
                  - "role[xlc-mco-agent]"
                  - "recipe[slurm::setup]"
                  - "role[ganglia-agent]"

            /etc/chef/configure-runlist.json:
              content:
                slurm:
                  nfs_server: {"Fn::GetAtt": [Login, PrivateIp]}
                run_list:
                  - "recipe[slurm::configure]"

            /etc/chef/deploy-runlist.json:
              content: '{"slurm": {"master": "false"}, "run_list": [ "recipe[slurm::deploy]" ]}'

            /etc/xlcloud-facts.json:
                content:
                    layer_id: {Ref: 'AWS::StackId'}
                    stack_id: {Ref: 'xlcloud:stackId'}
                    logical_resource_id: "Computes"

            /var/chef/chef-repo/roles/xlc-mco-agent.json: *xlc-mco-agent

            /var/chef/chef-repo/roles/ganglia-agent.json: *ganglia-agent

            /var/chef/chef-repo/Cheffile: *Cheffile

    Properties:
      ImageId: {Ref: 'xlcloud:defaultImageId'}
      InstanceType: {Ref: 'xlcloud:defaultInstanceType'}
      KeyName: {Ref: 'xlcloud:defaultKeyName'}
      SecurityGroups: [default,  {"Ref" : "LayerSecurityGroup"}]
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            -
              - "#!/bin/bash -ve"
              - "#HOME is required by librarian"
              - "export HOME=/root"
              - "source /etc/profile.d/proxy.sh"
              - "echo `curl -s http://169.254.169.254/latest/meta-data/instance-id` > /etc/hostname"
              - "hostname `cat /etc/hostname`"
              - "pip install --upgrade heat-cfntools"
              - "cfn-init"
              - "cd /var/chef/chef-repo"
              - "/usr/local/bin/librarian-chef install --clean --verbose"
              - "/bin/chef-solo -c /etc/chef/solo.rb -j /etc/chef/setup-runlist.json -L /var/log/chef-solo.log"
              - "crontab /tmp/cfn-hup-crontab.txt && rm -f /tmp/cfn-hup-crontab.txt"

Outputs:
  LoginAddress:
    Value: {Ref: LoginIp}
    Description: IP address of the cluster's login node
  NodesAddresses:
    Value: {'Fn::GetAtt': [Computes, InstanceList]}
    Description: IP addresses of the cluster's compute nodes
