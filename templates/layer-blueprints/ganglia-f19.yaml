HeatTemplateFormatVersion: '2012-12-12'
Description: "Deploy a monitoring node."
Outputs:
  MonitorIP:
    Description: "Private IP address of the Ganglia server"
    Value:  {'Fn::GetAtt': ['MonitorNode', 'PrivateIp']}
  PublicURL:
    Description: "Monitoring dashboard URL"
    Value:
      'Fn::Join':
         - ''
         - - 'http://'
           - {'Ref':'NodeIPAddress'}
           - '/ganglia'
Parameters:
  "xlcloud:brokerAddress":
      Type: "String"
      Description: "RabbitMQ broker address"
  "xlcloud:brokerPort":
      Type: "String"
      Description: "RabbitMQ broker port"
  "xlcloud:brokerUsername":
      Type: "String"
      Description: "RabbitMQ broker username"
  "xlcloud:brokerPassword":
      Type: "String"
      Description: "RabbitMQ broker password"
  MonitorPort: {Default: '8649', Type: String, Description: TCP port of monitoring traffic data}
  "xlcloud:monitoringCluster":
    Description: "Name of the cluster in the monitoring system"
    Type: String
  "xlcloud:stackId":
    Description: "Identifier of the parent stack"
    Type: String
  parentIamAccessyKey:
    Description: parentIamAccessyKey
    Type: String
    Default: 'parentIamAccessyKey:'
  parentIamSecretKey:
    Description: parentIamSecretKey
    Type: String
    Default: 'parentIamSecretKey:'
  xlcloud:defaultSubnetUuid:
    Description: "The subnet identifier this layer is connected to"
    Type: String
  xlcloud:defaultImageId:
    Type: String
    ConstraintDescription: must be a valid XLcloud image name.
    AllowedValues:
    - F19-x86_64-xlcloud
    Description: Default image name for instances in this stack
  xlcloud:defaultInstanceType:
    Type: String
    ConstraintDescription: must be a valid XLcloud instance type.
    Description: Default instance type (flavor) for instances in this stack
    Default: m1.small
  xlcloud:defaultKeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access

Resources:
  MonitorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: neutron
      SecurityGroupIngress:
      - {IpProtocol: icmp, CidrIp: 0.0.0.0/0, FromPort: '-1', ToPort: '-1'}
      - {ToPort: '80', IpProtocol: tcp, FromPort: '80', CidrIp: 0.0.0.0/0}
      - {ToPort: '443', IpProtocol: tcp, FromPort: '443', CidrIp: 0.0.0.0/0}
      - {ToPort: '22', IpProtocol: tcp, FromPort: '22', CidrIp: 0.0.0.0/0}
        # all gmond of cluster send data here
      - {ToPort: {Ref: MonitorPort}, IpProtocol: tcp, FromPort: {Ref: MonitorPort}, CidrIp: 0.0.0.0/0}
      - {ToPort: {Ref: MonitorPort}, IpProtocol: udp, FromPort: {Ref: MonitorPort}, CidrIp: 0.0.0.0/0}
      GroupDescription: "Firewall rules : SSH, HTTP(s) and Ganglia"

  MonitorNode:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |-
                #!/bin/bash -v
                export MY_PUB_IPV4=$(http_proxy= curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
                export MY_HOSTNAME=$(http_proxy= curl -s http://169.254.169.254/latest/meta-data/instance-id)
                echo $MY_HOSTNAME > /etc/hostname
                hostname $MY_HOSTNAME
                export HOME=/root
                echo $MY_PUB_IPV4 $MY_HOSTNAME >> /etc/hosts
                source /etc/profile.d/proxy.sh
                pip install --upgrade heat-cfntools
                cfn-init
                cd /var/chef/chef-repo
                /usr/local/bin/librarian-chef install --clean --verbose
                /bin/chef-solo -c /etc/chef/solo.rb -j /etc/chef/setup-runlist.json -L /var/log/chef-solo.log

      KeyName: {Ref: 'xlcloud:defaultKeyName'}
      SecurityGroups: [ {Ref: MonitorSecurityGroup} ]
      SubnetId: {Ref: 'xlcloud:defaultSubnetUuid'}
      InstanceType:
          Ref: 'xlcloud:defaultInstanceType'
      ImageId:
          Ref: 'xlcloud:defaultImageId'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/chef/configure-runlist.json:
              content: {}
            /etc/chef/deploy-runlist.json:
              content: {}
            /etc/chef/setup-runlist.json:
              content:
                run_list:
                    - "role[xlc-mco-agent]"
                    - "role[ganglia-server]"

            /var/chef/chef-repo/roles/xlc-mco-agent.json:
              content:
                  chef_type: "role"
                  default_attributes: {}
                  override_attributes:
                    mcollective:
                      enable_puppetlabs_repo: false
                      connector: "rabbitmq"
                      factsource: "ohai"
                      psk: "supersecret"
                      stomp:
                        hostname: {Ref: "xlcloud:brokerAddress"}
                        port: {Ref: "xlcloud:brokerPort"}
                        username: {Ref: "xlcloud:brokerUsername"}
                        password: {Ref: "xlcloud:brokerPassword"}
                  description: "This is a role to install ohai + mcollective server + xlcloud agent."
                  run_list:
                    - "recipe[ohai]"
                    - "recipe[mcollective::server]"
                    - "recipe[xlc-mco-agent]"

                  json_class: "Chef::Role"
                  name: "xlc-mco-agent"

              mode: "00400"
              owner: root
              group: root

            /var/chef/chef-repo/roles/ganglia-server.json:
              content:
                  chef_type: "role"
                  default_attributes: {}
                  override_attributes:
                    ganglia:
                      central_monit: true
                      cluster:
                        collector_host: "127.0.0.1"
                        name: {Ref: "xlcloud:monitoringCluster"}
                  description: "This is a role to install the ganglia service"
                  run_list:
                    - "recipe[ganglia]"
                    - "recipe[ganglia::web]"
                    - "recipe[ganglia::python_rr]"

                  json_class: "Chef::Role"
                  name: "ganglia-server"

              mode: "00400"
              owner: root
              group: root

            /var/chef/chef-repo/Cheffile: &Cheffile
              content:
                Fn::Join:
                  - "\n"
                  - 
                    - "#!/usr/bin/env ruby"
                    - "site 'http://community.opscode.com/api/v1'"
                    - "cookbook 'ohai'"
                    - "cookbook 'mcollective',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'mcollective'"
                    - "cookbook 'xlc-mco-agent',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'xlc-mco-agent'"
                    - "cookbook 'ganglia',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'ganglia'"
              mode: "00400"
              owner: root
              group: root

            /etc/xlcloud-facts.json:
                content:
                    layer_id: {Ref: 'AWS::StackId'}
                    stack_id: {Ref: 'xlcloud:stackId'}
                    logical_resource_id: "MonitorNode"

  NodeIPAddress: {Type: 'AWS::EC2::EIP'}

  NodeIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: {Ref: MonitorNode}
      EIP: {Ref: NodeIPAddress}
