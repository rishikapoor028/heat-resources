AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a single-instance relational database service

Parameters:
  "xlcloud:defaultKeyName":
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instances"
    Type: String
  "xlcloud:defaultImageId":
    Type: String
    ConstraintDescription: must be a valid XLcloud image name.
    Description: Cloud image Id for instances in this stack
  "xlcloud:stackId":
     Description: "The identifier of the parent stack"
     Type: String
  "xlcloud:layerSubnetUuid":
     Description: "The subnet identifier this layer is connected to"
     Type: String
  "xlcloud:defaultInstanceType":
    AllowedValues: ["m1.small", "m1.medium", "m1.large", "m1.xlarge"]
    Type: String
    Default: "m1.medium"
  "xlcloud:brokerAddress":
    Type: "String"
    Description: "RabbitMQ broker address"
  "xlcloud:brokerPort":
    Type: "String"
    Description: "RabbitMQ broker port"
  "xlcloud:brokerUsername":
    Type: "String"
    Description: "RabbitMQ broker username"
  "xlcloud:brokerPassword":
    Type: "String"
    Description: "RabbitMQ broker password"
  dbType:
    AllowedValues: ["mysql", "postgresql"]
    Type: String
    Description: "DB service type"
    Default: "mysql"
  dbPassword:
    Type: String
    Description: "DB admin password"
  allowedSubnet:
    Type: String
    Description: "IP subnet (in CIDR notation) allowed to connect to the service"
    Default: "0.0.0.0/0"

Mappings:
    DbTypeMap:
        mysql:
            port: "3306"
            admin_user: root
        postgresql:
            port: "5432"
            admin_user: postgres

Resources:

  DbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow SSH access + ICMP from anywhere + DB service from authorized subnet"
      VpcId: neutron
      SecurityGroupIngress:
        -
          IpProtocol: "icmp"
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: {"Fn::FindInMap" : [ "DbTypeMap", { "Ref" : dbType }, "port"]}
          ToPort: {"Fn::FindInMap" : [ "DbTypeMap", { "Ref" : dbType }, "port"]}
          CidrIp: {Ref: allowedSubnet}

  Handle:
    Type: AWS::CloudFormation::WaitConditionHandle

  Ready:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DbServer
    Properties:
      Handle: {Ref: Handle}
      Count: '1'
      Timeout: '900'

  DbServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/xlcloud/facts.json:
              content:
                layer_id: {Ref: 'AWS::StackId'}
                stack_id: {Ref: 'xlcloud:stackId'}
                logical_resource_id: "DbServer"
              mode: "00400"
              owner: root
              group: root

            /etc/chef/setup-runlist.json:
              content:
                mcollective:
                  connector: "rabbitmq"
                  factsource: "ohai"
                  psk: "supersecret"
                  stomp:
                    hostname: {Ref: "xlcloud:brokerAddress"}
                    port: {Ref: "xlcloud:brokerPort"}
                    username: {Ref: "xlcloud:brokerUsername"}
                    password: {Ref: "xlcloud:brokerPassword"}
                xlc-db:
                  type: {Ref: dbType}
                  password: {Ref: dbPassword}
                  listen_port: {"Fn::FindInMap" : [ "DbTypeMap", { "Ref" : dbType }, "port"]}
                run_list:
                  - "recipe[ohai]"
                  - "recipe[mcollective::server]"
                  - "recipe[xlc-mco-agent]"
                  - "recipe[xlc-db::setup]"

            /etc/chef/configure-runlist.json:
              content: {}

            /etc/chef/deploy-runlist.json:
              content:
                xlc-db:
                  type: {Ref: dbType}
                  password: {Ref: dbPassword}
                  listen_port: {"Fn::FindInMap" : [ "DbTypeMap", { "Ref" : dbType }, "port"]}
                run_list:
                    - "recipe[xlc-db::deploy]"

            /etc/chef/undeploy-runlist.json:
              content: {}

            /etc/chef/suspend-runlist.json:
              content: {}

            /etc/chef/resume-runlist.json:
              content: {}

            /etc/chef/shutdown-runlist.json:
              content: {}

            /var/chef/chef-repo/Cheffile:
              content:
                Fn::Join:
                  - "\n"
                  -
                    - "#!/usr/bin/env ruby"
                    - "site 'http://community.opscode.com/api/v1'"
                    - "cookbook 'ohai'"
                    - "cookbook 'mcollective',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'mcollective'"
                    - "cookbook 'xlc-mco-agent',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'xlc-mco-agent'"
                    - "cookbook 'xlc-db',"
                    - "    :git => 'http://git.gitorious.ow2.org/~xlcloud-continuous-integration/xlcloud/cookbooks-ci.git',"
                    - "    :path => 'xlc-db'"
              mode: "00400"
              owner: root
              group: root

    Properties:
      ImageId: {Ref: 'xlcloud:defaultImageId'}
      InstanceType: {Ref: 'xlcloud:defaultInstanceType'}
      KeyName: {Ref: 'xlcloud:defaultKeyName'}
      SecurityGroups: [{"Ref" : "DbSecurityGroup"}]
      SubnetId: {Ref: 'xlcloud:layerSubnetUuid'}
      Tags:
      - { Key: metering.StackId, Value: {Ref: 'AWS::StackId'}}
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -ve

            '
            - 'source /etc/profile.d/proxy.sh

            '
            - 'pip install --upgrade heat-cfntools

            '
            - 'cfn-init

            '
            - 'cd /var/chef/chef-repo

            '
            - '/usr/local/bin/librarian-chef install --clean --verbose

            '
            - '/bin/chef-solo -c /etc/chef/solo.rb -L /var/log/chef-solo.log -j /etc/chef/setup-runlist.json

            '
            - "cfn-signal -e 0 '"
            - {Ref: Handle}
            - "'"

Outputs:
  DbAddress:
    Value: {'Fn:GetAtt': ['DbServer', 'PrivateIp']}
    Description: IP address of the DB server
  DbPort:
    Value: {"Fn::FindInMap" : [ "DbTypeMap", { "Ref" : dbType }, "port"]}
    Description: TCP port where the DB service is running
  DbAdminUser:
    Value: {"Fn::FindInMap" : [ "DbTypeMap", { "Ref" : dbType }, "admin_user"]}
    Description: Administrator username
